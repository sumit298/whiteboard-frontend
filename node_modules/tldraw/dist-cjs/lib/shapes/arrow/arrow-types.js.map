{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/arrow/arrow-types.ts"],
  "sourcesContent": ["import { TLArrowShapeArrowheadStyle, TLDefaultSizeStyle, VecLike } from '@tldraw/editor'\nimport { ElbowArrowInfo, ElbowArrowRoute } from './elbow/definitions'\nimport { TLArrowBindings } from './shared'\n\n/**\n * Options for the arrow shape.\n *\n * @example\n * ```tsx\n * const shapeUtils = [\n *   ArrowShapeUtil.configure({ arcArrowCenterSnapDistance: 0 }),\n * ]\n *\n * function MyApp() {\n *   return <Tldraw shapeUtils={shapeUtils} />\n * }\n * ```\n *\n * @public\n */\nexport interface ArrowShapeOptions {\n\t/**\n\t * How far should elbow arrows expand from the shapes they're targeting?\n\t */\n\treadonly expandElbowLegLength: Record<TLDefaultSizeStyle, number>\n\t/**\n\t * The minimum length of an elbow arrow's leg.\n\t */\n\treadonly minElbowLegLength: Record<TLDefaultSizeStyle, number>\n\t/**\n\t * The minimum distance, in screen pixels, between two handles on an elbow arrow. If two handles\n\t * would be closer than this distance, they're both hidden.\n\t */\n\treadonly minElbowHandleDistance: number\n\n\t/**\n\t * The distance, in screen pixels, at which we snap to the center of a target shape when drawing\n\t * an arc arrow. Set to 0 to disable.\n\t */\n\treadonly arcArrowCenterSnapDistance: number\n\t/**\n\t * The distance, in screen pixels, at which we snap to the center of a target shape when drawing\n\t * an elbow arrow. Set to 0 to disable.\n\t */\n\treadonly elbowArrowCenterSnapDistance: number\n\t/**\n\t * The distance, in screen pixels, at which we snap to the edge of a target shape when drawing\n\t * an elbow arrow. Set to 0 to disable.\n\t */\n\treadonly elbowArrowEdgeSnapDistance: number\n\t/**\n\t * The distance, in screen pixels, at which we snap to one of the 4 directional points (top,\n\t * right, bottom, left) of a target shape when drawing an elbow arrow. Set to 0 to disable.\n\t */\n\treadonly elbowArrowPointSnapDistance: number\n\t/**\n\t * The distance, in screen pixels, at which we snap to the axis passing through the center of a\n\t * shape when drawing an elbow arrow. Set to 0 to disable.\n\t */\n\treadonly elbowArrowAxisSnapDistance: number\n\n\t/**\n\t * The distance, in screen pixels, at which we snap an arrow label to center of the arrow when\n\t * dragging it. Set to 0 to disable.\n\t */\n\treadonly labelCenterSnapDistance: number\n\t/**\n\t * The distance, in screen pixels, at which we snap an elbow arrow midpoint handle to the\n\t * midpoint between two shapes. Set to 0 to disable.\n\t */\n\treadonly elbowMidpointSnapDistance: number\n\t/**\n\t * The minimum length, in screen pixels, of an elbow arrows midpoint segment before we show the\n\t * handle for dragging that segment.\n\t */\n\treadonly elbowMinSegmentLengthToShowMidpointHandle: number\n\n\t/**\n\t * When hovering over a shape using the arrow tool, how long should we wait before we assume the\n\t * user is targeting precisely instead of imprecisely.\n\t */\n\treadonly hoverPreciseTimeout: number\n\t/**\n\t * When pointing at a shape using the arrow tool or draggin an arrow terminal handle, how long\n\t * should we wait before we assume the user is targeting precisely instead of imprecisely.\n\t */\n\treadonly pointingPreciseTimeout: number\n}\n\n/** @public */\nexport interface TLArrowPoint {\n\thandle: VecLike\n\tpoint: VecLike\n\tarrowhead: TLArrowShapeArrowheadStyle\n}\n\n/** @public */\nexport interface TLArcInfo {\n\tcenter: VecLike\n\tradius: number\n\tsize: number\n\tlength: number\n\tlargeArcFlag: number\n\tsweepFlag: number\n}\n\n/** @public */\nexport interface TLArcArrowInfo {\n\tbindings: TLArrowBindings\n\ttype: 'arc'\n\tstart: TLArrowPoint\n\tend: TLArrowPoint\n\tmiddle: VecLike\n\thandleArc: TLArcInfo\n\tbodyArc: TLArcInfo\n\tisValid: boolean\n}\n\n/** @public */\nexport interface TLStraightArrowInfo {\n\tbindings: TLArrowBindings\n\ttype: 'straight'\n\tstart: TLArrowPoint\n\tend: TLArrowPoint\n\tmiddle: VecLike\n\tisValid: boolean\n\tlength: number\n}\n\n/** @public */\nexport interface TLElbowArrowInfo {\n\ttype: 'elbow'\n\tbindings: TLArrowBindings\n\tstart: TLArrowPoint\n\tend: TLArrowPoint\n\telbow: ElbowArrowInfo\n\troute: ElbowArrowRoute\n\tisValid: boolean\n}\n\n/** @public */\nexport type TLArrowInfo = TLArcArrowInfo | TLStraightArrowInfo | TLElbowArrowInfo\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
