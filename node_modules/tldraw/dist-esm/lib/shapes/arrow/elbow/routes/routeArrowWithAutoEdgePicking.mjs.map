{
  "version": 3,
  "sources": ["../../../../../../src/lib/shapes/arrow/elbow/routes/routeArrowWithAutoEdgePicking.tsx"],
  "sourcesContent": ["import { exhaustiveSwitchError } from '@tldraw/editor'\nimport {\n\tElbowArrowRoute,\n\tElbowArrowSide,\n\tElbowArrowSideOpposites,\n\tElbowArrowSideReason,\n\tElbowArrowSides,\n} from '../definitions'\nimport { ElbowArrowWorkingInfo } from './ElbowArrowWorkingInfo'\nimport { tryRouteArrow } from './elbowArrowRoutes'\n\nexport function routeArrowWithAutoEdgePicking(\n\tinfo: ElbowArrowWorkingInfo,\n\treason: ElbowArrowSideReason\n): ElbowArrowRoute | null {\n\tlet idealRoute = null\n\tif (\n\t\t// +1 to bias us towards the x-axis. without this, we get flicker as we move an arrow locket\n\t\t// to 45 deg (as gapx/gapy are almost equal and the result depends on floating point\n\t\t// precision)\n\t\tMath.abs(info.gapX) + 1 > Math.abs(info.gapY) &&\n\t\tinfo.midX !== null\n\t) {\n\t\tif (info.gapX > 0) {\n\t\t\tidealRoute = tryRouteArrow(info, 'right', 'left')\n\t\t} else {\n\t\t\tidealRoute = tryRouteArrow(info, 'left', 'right')\n\t\t}\n\t} else {\n\t\tconst aRight = info.A.edges.right\n\t\tconst aLeft = info.A.edges.left\n\t\tconst bTop = info.B.edges.top\n\t\tconst bBottom = info.B.edges.bottom\n\n\t\tif (info.A.isPoint && info.B.isPoint) {\n\t\t\tif (info.gapY > 0) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'bottom', 'top')\n\t\t\t} else {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'top', 'bottom')\n\t\t\t}\n\t\t} else if (\n\t\t\taRight &&\n\t\t\tbTop &&\n\t\t\t(aRight.expanded ?? aRight.value) <= bTop.crossTarget &&\n\t\t\taRight.crossTarget <= (bTop.expanded ?? bTop.value)\n\t\t) {\n\t\t\tidealRoute = tryRouteArrow(info, 'right', 'top')\n\t\t} else if (\n\t\t\taRight &&\n\t\t\tbBottom &&\n\t\t\t(aRight.expanded ?? aRight.value) <= bBottom.crossTarget &&\n\t\t\taRight.crossTarget >= (bBottom.expanded ?? bBottom.value)\n\t\t) {\n\t\t\tidealRoute = tryRouteArrow(info, 'right', 'bottom')\n\t\t} else if (\n\t\t\taLeft &&\n\t\t\tbTop &&\n\t\t\t(aLeft.expanded ?? aLeft.value) >= bTop.crossTarget &&\n\t\t\taLeft.crossTarget <= (bTop.expanded ?? bTop.value)\n\t\t) {\n\t\t\tidealRoute = tryRouteArrow(info, 'left', 'top')\n\t\t} else if (\n\t\t\taLeft &&\n\t\t\tbBottom &&\n\t\t\t(aLeft.expanded ?? aLeft.value) >= bBottom.crossTarget &&\n\t\t\taLeft.crossTarget >= (bBottom.expanded ?? bBottom.value)\n\t\t) {\n\t\t\tidealRoute = tryRouteArrow(info, 'left', 'bottom')\n\t\t} else if (info.gapY > 0 && info.midY !== null) {\n\t\t\tidealRoute = tryRouteArrow(info, 'bottom', 'top')\n\t\t} else if (info.gapY < 0 && info.midY !== null) {\n\t\t\tidealRoute = tryRouteArrow(info, 'top', 'bottom')\n\t\t}\n\t}\n\n\tif (idealRoute) {\n\t\tidealRoute.aEdgePicking = reason\n\t\tidealRoute.bEdgePicking = reason\n\t\treturn idealRoute\n\t}\n\n\tconst aAvailableSide = ElbowArrowSides.filter((side) => info.A.edges[side])\n\tconst bAvailableSides = ElbowArrowSides.filter((side) => info.B.edges[side])\n\n\tconst nonPartialRouteCandidates = aAvailableSide.flatMap((aSide) =>\n\t\tbAvailableSides.map((bSide) => [aSide, bSide, reason, reason] as const)\n\t)\n\n\treturn pickBest(info, nonPartialRouteCandidates)\n}\n\nexport function routeArrowWithPartialEdgePicking(\n\tinfo: ElbowArrowWorkingInfo,\n\taSide: ElbowArrowSide\n) {\n\tlet idealRoute = null\n\n\tconst aRight = info.A.edges.right\n\tconst aLeft = info.A.edges.left\n\tconst bTop = info.B.edges.top\n\tconst bBottom = info.B.edges.bottom\n\n\tswitch (aSide) {\n\t\tcase 'right':\n\t\t\tif (info.gapX > 0 && info.gapX > Math.abs(info.gapY) && info.midX !== null) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'right', 'left')\n\t\t\t} else if (\n\t\t\t\taRight &&\n\t\t\t\tbTop &&\n\t\t\t\t(aRight.expanded ?? aRight.value) <= bTop.crossTarget &&\n\t\t\t\taRight.crossTarget <= (bTop.expanded ?? bTop.value)\n\t\t\t) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'right', 'top')\n\t\t\t} else if (\n\t\t\t\taRight &&\n\t\t\t\tbBottom &&\n\t\t\t\t(aRight.expanded ?? aRight.value) <= bBottom.crossTarget &&\n\t\t\t\taRight.crossTarget >= (bBottom.expanded ?? bBottom.value)\n\t\t\t) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'right', 'bottom')\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'left':\n\t\t\tif (info.gapX < 0 && Math.abs(info.gapX) > Math.abs(info.gapY) && info.midX !== null) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'left', 'right')\n\t\t\t} else if (\n\t\t\t\taLeft &&\n\t\t\t\tbTop &&\n\t\t\t\t(aLeft.expanded ?? aLeft.value) >= bTop.crossTarget &&\n\t\t\t\taLeft.crossTarget <= (bTop.expanded ?? bTop.value)\n\t\t\t) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'left', 'top')\n\t\t\t} else if (\n\t\t\t\taLeft &&\n\t\t\t\tbBottom &&\n\t\t\t\t(aLeft.expanded ?? aLeft.value) >= bBottom.crossTarget &&\n\t\t\t\taLeft.crossTarget >= (bBottom.expanded ?? bBottom.value)\n\t\t\t) {\n\t\t\t\tidealRoute = tryRouteArrow(info, 'left', 'bottom')\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'top':\n\t\tcase 'bottom':\n\t\t\t// top and bottom are handled by the pickShortest approach below - it automatically\n\t\t\t// picks the path we would pick with heuristics anyway.\n\t\t\tbreak\n\t\tdefault:\n\t\t\texhaustiveSwitchError(aSide)\n\t}\n\n\tif (idealRoute) {\n\t\tidealRoute.aEdgePicking = 'manual'\n\t\tidealRoute.bEdgePicking = 'auto'\n\t\treturn idealRoute\n\t}\n\n\tswitch (aSide) {\n\t\tcase 'top':\n\t\t\treturn pickBest(info, [\n\t\t\t\t['top', 'bottom', 'manual', 'auto'],\n\t\t\t\t['top', 'right', 'manual', 'auto'],\n\t\t\t\t['top', 'left', 'manual', 'auto'],\n\t\t\t\t['top', 'top', 'manual', 'auto'],\n\t\t\t])\n\t\tcase 'bottom':\n\t\t\treturn pickBest(info, [\n\t\t\t\t['bottom', 'top', 'manual', 'auto'],\n\t\t\t\t['bottom', 'right', 'manual', 'auto'],\n\t\t\t\t['bottom', 'left', 'manual', 'auto'],\n\t\t\t\t['bottom', 'bottom', 'manual', 'auto'],\n\t\t\t])\n\t\tcase 'left':\n\t\t\treturn pickBest(info, [\n\t\t\t\t['left', 'right', 'manual', 'auto'],\n\t\t\t\t['left', 'bottom', 'manual', 'auto'],\n\t\t\t\t['left', 'left', 'manual', 'auto'],\n\t\t\t\t['left', 'top', 'manual', 'auto'],\n\t\t\t])\n\t\tcase 'right':\n\t\t\treturn pickBest(info, [\n\t\t\t\t['right', 'left', 'manual', 'auto'],\n\t\t\t\t['right', 'bottom', 'manual', 'auto'],\n\t\t\t\t['right', 'right', 'manual', 'auto'],\n\t\t\t\t['right', 'top', 'manual', 'auto'],\n\t\t\t])\n\t}\n}\n\nexport function routeArrowWithManualEdgePicking(\n\tinfo: ElbowArrowWorkingInfo,\n\taSide: ElbowArrowSide,\n\tbSide: ElbowArrowSide\n) {\n\tconst route = tryRouteArrow(info, aSide, bSide)\n\tif (route) return route\n\n\tif (info.A.isPoint && info.B.isPoint) {\n\t\treturn pickBest(info, [\n\t\t\t[ElbowArrowSideOpposites[aSide], ElbowArrowSideOpposites[bSide], 'manual', 'manual'],\n\t\t\t[aSide, ElbowArrowSideOpposites[bSide], 'manual', 'auto'],\n\t\t\t[ElbowArrowSideOpposites[aSide], bSide, 'auto', 'manual'],\n\t\t])\n\t} else if (info.A.isPoint) {\n\t\treturn tryRouteArrow(info, ElbowArrowSideOpposites[aSide], bSide)\n\t} else if (info.B.isPoint) {\n\t\treturn tryRouteArrow(info, aSide, ElbowArrowSideOpposites[bSide])\n\t}\n\n\treturn null\n}\nfunction pickBest(\n\tinfo: ElbowArrowWorkingInfo,\n\tedges: ReadonlyArray<\n\t\treadonly [ElbowArrowSide, ElbowArrowSide, ElbowArrowSideReason, ElbowArrowSideReason]\n\t>\n) {\n\tlet bestRoute: ElbowArrowRoute | null = null\n\tlet bestCornerCount = Infinity\n\tlet bestDistance = Infinity\n\tlet distanceBias = 0\n\tfor (const [aSide, bSide, aEdgePicking, bEdgePicking] of edges) {\n\t\tdistanceBias += 1\n\t\tconst route = tryRouteArrow(info, aSide, bSide)\n\t\tif (route) {\n\t\t\troute.aEdgePicking = aEdgePicking\n\t\t\troute.bEdgePicking = bEdgePicking\n\t\t\tif (route.points.length < bestCornerCount) {\n\t\t\t\tbestCornerCount = route.points.length\n\t\t\t\tbestDistance = route.distance\n\t\t\t\tbestRoute = route\n\t\t\t} else if (\n\t\t\t\troute.points.length === bestCornerCount &&\n\t\t\t\troute.distance + distanceBias < bestDistance\n\t\t\t) {\n\t\t\t\tbestDistance = route.distance\n\t\t\t\tbestRoute = route\n\t\t\t}\n\t\t}\n\t}\n\treturn bestRoute\n}\n"],
  "mappings": "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",
  "names": []
}
