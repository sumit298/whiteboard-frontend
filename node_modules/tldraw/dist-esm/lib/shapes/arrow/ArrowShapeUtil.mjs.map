{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/arrow/ArrowShapeUtil.tsx"],
  "sourcesContent": ["import {\n\tArc2d,\n\tBox,\n\tEMPTY_ARRAY,\n\tEdge2d,\n\tEditor,\n\tGeometry2d,\n\tGroup2d,\n\tIndexKey,\n\tPI2,\n\tPolyline2d,\n\tRectangle2d,\n\tSVGContainer,\n\tShapeUtil,\n\tSvgExportContext,\n\tTLArrowBinding,\n\tTLArrowBindingProps,\n\tTLArrowShape,\n\tTLArrowShapeProps,\n\tTLFontFace,\n\tTLHandle,\n\tTLHandleDragInfo,\n\tTLResizeInfo,\n\tTLShapePartial,\n\tTLShapeUtilCanBeLaidOutOpts,\n\tTLShapeUtilCanBindOpts,\n\tTLShapeUtilCanvasSvgDef,\n\tVec,\n\tWeakCache,\n\tarrowShapeMigrations,\n\tarrowShapeProps,\n\tclamp,\n\tdebugFlags,\n\texhaustiveSwitchError,\n\tgetDefaultColorTheme,\n\tinvLerp,\n\tlerp,\n\tmapObjectMapValues,\n\tmaybeSnapToGrid,\n\tstructuredClone,\n\ttoDomPrecision,\n\ttrack,\n\tuseEditor,\n\tuseIsEditing,\n\tuseSharedSafeId,\n\tuseValue,\n} from '@tldraw/editor'\nimport React, { useMemo } from 'react'\nimport { updateArrowTerminal } from '../../bindings/arrow/ArrowBindingUtil'\nimport { PathBuilder } from '../shared/PathBuilder'\nimport { PlainTextLabel } from '../shared/PlainTextLabel'\nimport { ShapeFill } from '../shared/ShapeFill'\nimport { SvgTextLabel } from '../shared/SvgTextLabel'\nimport { ARROW_LABEL_PADDING, STROKE_SIZES, TEXT_PROPS } from '../shared/default-shape-constants'\nimport { DefaultFontFaces } from '../shared/defaultFonts'\nimport { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'\nimport { useDefaultColorTheme } from '../shared/useDefaultColorTheme'\nimport { getArrowBodyPath, getArrowHandlePath } from './ArrowPath'\nimport { ArrowShapeOptions } from './arrow-types'\nimport {\n\tgetArrowLabelDefaultPosition,\n\tgetArrowLabelFontSize,\n\tgetArrowLabelPosition,\n} from './arrowLabel'\nimport { updateArrowTargetState } from './arrowTargetState'\nimport { getArrowheadPathForType } from './arrowheads'\nimport { ElbowArrowDebug } from './elbow/ElbowArrowDebug'\nimport { ElbowArrowAxes } from './elbow/definitions'\nimport { getElbowArrowSnapLines, perpDistanceToLineAngle } from './elbow/elbowArrowSnapLines'\nimport {\n\tTLArrowBindings,\n\tcreateOrUpdateArrowBinding,\n\tgetArrowBindings,\n\tgetArrowInfo,\n\tgetArrowTerminalsInArrowSpace,\n\tremoveArrowBinding,\n} from './shared'\n\nenum ArrowHandles {\n\tStart = 'start',\n\tMiddle = 'middle',\n\tEnd = 'end',\n}\n\n/** @public */\nexport class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {\n\tstatic override type = 'arrow' as const\n\tstatic override props = arrowShapeProps\n\tstatic override migrations = arrowShapeMigrations\n\n\toverride options: ArrowShapeOptions = {\n\t\texpandElbowLegLength: {\n\t\t\ts: 28,\n\t\t\tm: 36,\n\t\t\tl: 44,\n\t\t\txl: 66,\n\t\t},\n\t\tminElbowLegLength: {\n\t\t\ts: STROKE_SIZES.s * 3,\n\t\t\tm: STROKE_SIZES.m * 3,\n\t\t\tl: STROKE_SIZES.l * 3,\n\t\t\txl: STROKE_SIZES.xl * 3,\n\t\t},\n\t\tminElbowHandleDistance: 16,\n\n\t\tarcArrowCenterSnapDistance: 16,\n\t\telbowArrowCenterSnapDistance: 24,\n\t\telbowArrowEdgeSnapDistance: 20,\n\t\telbowArrowPointSnapDistance: 24,\n\t\telbowArrowAxisSnapDistance: 16,\n\n\t\tlabelCenterSnapDistance: 10,\n\n\t\telbowMidpointSnapDistance: 10,\n\t\telbowMinSegmentLengthToShowMidpointHandle: 20,\n\n\t\thoverPreciseTimeout: 600,\n\t\tpointingPreciseTimeout: 320,\n\t}\n\n\toverride canEdit() {\n\t\treturn true\n\t}\n\toverride canBind({ toShapeType }: TLShapeUtilCanBindOpts<TLArrowShape>): boolean {\n\t\t// bindings can go from arrows to shapes, but not from shapes to arrows\n\t\treturn toShapeType !== 'arrow'\n\t}\n\toverride canSnap() {\n\t\treturn false\n\t}\n\toverride canTabTo(shape: TLArrowShape) {\n\t\tconst bindings = getArrowBindings(this.editor, shape)\n\t\treturn !!(bindings.start || bindings.end || shape.props.text)\n\t}\n\toverride hideResizeHandles() {\n\t\treturn true\n\t}\n\toverride hideRotateHandle() {\n\t\treturn true\n\t}\n\toverride hideSelectionBoundsBg() {\n\t\treturn true\n\t}\n\toverride hideSelectionBoundsFg() {\n\t\treturn true\n\t}\n\n\toverride canBeLaidOut(shape: TLArrowShape, info: TLShapeUtilCanBeLaidOutOpts) {\n\t\tif (info.type === 'flip') {\n\t\t\t// If we don't have this then the flip will be non-idempotent; that is, the flip will be multipotent, varipotent, or perhaps even omni-potent... and we can't have that\n\t\t\tconst bindings = getArrowBindings(this.editor, shape)\n\t\t\tconst { start, end } = bindings\n\t\t\tconst { shapes = [] } = info\n\t\t\tif (start && !shapes.find((s) => s.id === start.toId)) return false\n\t\t\tif (end && !shapes.find((s) => s.id === end.toId)) return false\n\t\t}\n\t\treturn true\n\t}\n\n\toverride getFontFaces(shape: TLArrowShape): TLFontFace[] {\n\t\tif (!shape.props.text) return EMPTY_ARRAY\n\t\treturn [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]\n\t}\n\n\toverride getDefaultProps(): TLArrowShape['props'] {\n\t\treturn {\n\t\t\tkind: 'arc',\n\t\t\telbowMidPoint: 0.5,\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tfill: 'none',\n\t\t\tcolor: 'black',\n\t\t\tlabelColor: 'black',\n\t\t\tbend: 0,\n\t\t\tstart: { x: 0, y: 0 },\n\t\t\tend: { x: 2, y: 0 },\n\t\t\tarrowheadStart: 'none',\n\t\t\tarrowheadEnd: 'arrow',\n\t\t\ttext: '',\n\t\t\tlabelPosition: 0.5,\n\t\t\tfont: 'draw',\n\t\t\tscale: 1,\n\t\t}\n\t}\n\n\tgetGeometry(shape: TLArrowShape) {\n\t\tconst isEditing = this.editor.getEditingShapeId() === shape.id\n\t\tconst info = getArrowInfo(this.editor, shape)!\n\n\t\tconst debugGeom: Geometry2d[] = []\n\n\t\tconst bodyGeom =\n\t\t\tinfo.type === 'straight'\n\t\t\t\t? new Edge2d({\n\t\t\t\t\t\tstart: Vec.From(info.start.point),\n\t\t\t\t\t\tend: Vec.From(info.end.point),\n\t\t\t\t\t})\n\t\t\t\t: info.type === 'arc'\n\t\t\t\t\t? new Arc2d({\n\t\t\t\t\t\t\tcenter: Vec.Cast(info.handleArc.center),\n\t\t\t\t\t\t\tstart: Vec.Cast(info.start.point),\n\t\t\t\t\t\t\tend: Vec.Cast(info.end.point),\n\t\t\t\t\t\t\tsweepFlag: info.bodyArc.sweepFlag,\n\t\t\t\t\t\t\tlargeArcFlag: info.bodyArc.largeArcFlag,\n\t\t\t\t\t\t})\n\t\t\t\t\t: new Polyline2d({ points: info.route.points })\n\n\t\tlet labelGeom\n\t\tif (isEditing || shape.props.text.trim()) {\n\t\t\tconst labelPosition = getArrowLabelPosition(this.editor, shape)\n\t\t\tif (debugFlags.debugGeometry.get()) {\n\t\t\t\tdebugGeom.push(...labelPosition.debugGeom)\n\t\t\t}\n\t\t\tlabelGeom = new Rectangle2d({\n\t\t\t\tx: labelPosition.box.x,\n\t\t\t\ty: labelPosition.box.y,\n\t\t\t\twidth: labelPosition.box.w,\n\t\t\t\theight: labelPosition.box.h,\n\t\t\t\tisFilled: true,\n\t\t\t\tisLabel: true,\n\t\t\t})\n\t\t}\n\n\t\treturn new Group2d({\n\t\t\tchildren: [...(labelGeom ? [bodyGeom, labelGeom] : [bodyGeom]), ...debugGeom],\n\t\t})\n\t}\n\n\toverride getHandles(shape: TLArrowShape): TLHandle[] {\n\t\tconst info = getArrowInfo(this.editor, shape)!\n\n\t\tconst handles: TLHandle[] = [\n\t\t\t{\n\t\t\t\tid: ArrowHandles.Start,\n\t\t\t\ttype: 'vertex',\n\t\t\t\tindex: 'a1' as IndexKey,\n\t\t\t\tx: info.start.handle.x,\n\t\t\t\ty: info.start.handle.y,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: ArrowHandles.End,\n\t\t\t\ttype: 'vertex',\n\t\t\t\tindex: 'a3' as IndexKey,\n\t\t\t\tx: info.end.handle.x,\n\t\t\t\ty: info.end.handle.y,\n\t\t\t},\n\t\t]\n\n\t\tif (shape.props.kind === 'arc' && (info.type === 'straight' || info.type === 'arc')) {\n\t\t\thandles.push({\n\t\t\t\tid: ArrowHandles.Middle,\n\t\t\t\ttype: 'virtual',\n\t\t\t\tindex: 'a2' as IndexKey,\n\t\t\t\tx: info.middle.x,\n\t\t\t\ty: info.middle.y,\n\t\t\t})\n\t\t}\n\n\t\tif (shape.props.kind === 'elbow' && info.type === 'elbow' && info.route.midpointHandle) {\n\t\t\tconst shapePageTransform = this.editor.getShapePageTransform(shape.id)!\n\n\t\t\tconst segmentStart = shapePageTransform.applyToPoint(info.route.midpointHandle.segmentStart)\n\t\t\tconst segmentEnd = shapePageTransform.applyToPoint(info.route.midpointHandle.segmentEnd)\n\t\t\tconst segmentLength = Vec.Dist(segmentStart, segmentEnd) * this.editor.getZoomLevel()\n\n\t\t\tif (segmentLength > this.options.elbowMinSegmentLengthToShowMidpointHandle) {\n\t\t\t\thandles.push({\n\t\t\t\t\tid: ArrowHandles.Middle,\n\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\tindex: 'a2' as IndexKey,\n\t\t\t\t\tx: info.route.midpointHandle.point.x,\n\t\t\t\t\ty: info.route.midpointHandle.point.y,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn handles\n\t}\n\n\toverride getText(shape: TLArrowShape) {\n\t\treturn shape.props.text\n\t}\n\n\toverride onHandleDrag(shape: TLArrowShape, info: TLHandleDragInfo<TLArrowShape>) {\n\t\tconst handleId = info.handle.id as ArrowHandles\n\t\tswitch (handleId) {\n\t\t\tcase ArrowHandles.Middle:\n\t\t\t\tswitch (shape.props.kind) {\n\t\t\t\t\tcase 'arc':\n\t\t\t\t\t\treturn this.onArcMidpointHandleDrag(shape, info)\n\t\t\t\t\tcase 'elbow':\n\t\t\t\t\t\treturn this.onElbowMidpointHandleDrag(shape, info)\n\t\t\t\t\tdefault:\n\t\t\t\t\t\texhaustiveSwitchError(shape.props.kind)\n\t\t\t\t}\n\t\t\tcase ArrowHandles.Start:\n\t\t\tcase ArrowHandles.End:\n\t\t\t\treturn this.onTerminalHandleDrag(shape, info, handleId)\n\t\t\tdefault:\n\t\t\t\texhaustiveSwitchError(handleId)\n\t\t}\n\t}\n\n\tprivate onArcMidpointHandleDrag(shape: TLArrowShape, { handle }: TLHandleDragInfo<TLArrowShape>) {\n\t\tconst bindings = getArrowBindings(this.editor, shape)\n\n\t\t// Bending the arrow...\n\t\tconst { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)\n\n\t\tconst delta = Vec.Sub(end, start)\n\t\tconst v = Vec.Per(delta)\n\n\t\tconst med = Vec.Med(end, start)\n\t\tconst A = Vec.Sub(med, v)\n\t\tconst B = Vec.Add(med, v)\n\n\t\tconst point = Vec.NearestPointOnLineSegment(A, B, handle, false)\n\t\tlet bend = Vec.Dist(point, med)\n\t\tif (Vec.Clockwise(point, end, med)) bend *= -1\n\t\treturn { id: shape.id, type: shape.type, props: { bend } }\n\t}\n\n\tprivate onElbowMidpointHandleDrag(\n\t\tshape: TLArrowShape,\n\t\t{ handle }: TLHandleDragInfo<TLArrowShape>\n\t) {\n\t\tconst info = getArrowInfo(this.editor, shape)\n\t\tif (info?.type !== 'elbow') return\n\n\t\tconst shapeToPageTransform = this.editor.getShapePageTransform(shape.id)!\n\t\tconst handlePagePoint = shapeToPageTransform.applyToPoint(handle)\n\t\tconst axisName = info.route.midpointHandle?.axis\n\t\tif (!axisName) return\n\t\tconst axis = ElbowArrowAxes[axisName]\n\n\t\tconst midRange = info.elbow[axis.midRange]\n\t\tif (!midRange) return\n\n\t\t// We're snapping against a list of parallel lines. The way we do this is to calculate the\n\t\t// angle of the line we're snapping to...\n\t\tlet angle = Vec.Angle(\n\t\t\tshapeToPageTransform.applyToPoint(axis.v(0, 0)),\n\t\t\tshapeToPageTransform.applyToPoint(axis.v(0, 1))\n\t\t)\n\t\tif (angle < 0) angle += Math.PI\n\n\t\t// ...then calculate the perpendicular distance from the origin to the (infinite) line in\n\t\t// question. This returns a signed distance - lines \"behind\" the origin are negative.\n\t\tconst handlePoint = perpDistanceToLineAngle(handlePagePoint, angle)\n\n\t\t// As we're only ever moving along one dimension, we can use this perpendicular distance for\n\t\t// all of our snapping calculations.\n\t\tconst loPoint = perpDistanceToLineAngle(\n\t\t\tshapeToPageTransform.applyToPoint(axis.v(midRange.lo, 0)),\n\t\t\tangle\n\t\t)\n\t\tconst hiPoint = perpDistanceToLineAngle(\n\t\t\tshapeToPageTransform.applyToPoint(axis.v(midRange.hi, 0)),\n\t\t\tangle\n\t\t)\n\n\t\t// we want to snap to certain points. the maximum distance at which a snap will occur is\n\t\t// relative to the zoom level:\n\t\tconst maxSnapDistance = this.options.elbowMidpointSnapDistance / this.editor.getZoomLevel()\n\n\t\t// we snap to the midpoint of the range by default\n\t\tconst midPoint = perpDistanceToLineAngle(\n\t\t\tshapeToPageTransform.applyToPoint(axis.v(lerp(midRange.lo, midRange.hi, 0.5), 0)),\n\t\t\tangle\n\t\t)\n\n\t\tlet snapPoint = midPoint\n\t\tlet snapDistance = Math.abs(midPoint - handlePoint)\n\n\t\t// then we check all the other arrows that are on-screen.\n\t\tfor (const [snapAngle, snapLines] of getElbowArrowSnapLines(this.editor)) {\n\t\t\tconst { isParallel, isFlippedParallel } = anglesAreApproximatelyParallel(angle, snapAngle)\n\t\t\tif (isParallel || isFlippedParallel) {\n\t\t\t\tfor (const snapLine of snapLines) {\n\t\t\t\t\tconst doesShareStartIntersection =\n\t\t\t\t\t\tsnapLine.startBoundShapeId &&\n\t\t\t\t\t\t(snapLine.startBoundShapeId === info.bindings.start?.toId ||\n\t\t\t\t\t\t\tsnapLine.startBoundShapeId === info.bindings.end?.toId)\n\n\t\t\t\t\tconst doesShareEndIntersection =\n\t\t\t\t\t\tsnapLine.endBoundShapeId &&\n\t\t\t\t\t\t(snapLine.endBoundShapeId === info.bindings.start?.toId ||\n\t\t\t\t\t\t\tsnapLine.endBoundShapeId === info.bindings.end?.toId)\n\n\t\t\t\t\tif (!doesShareStartIntersection && !doesShareEndIntersection) continue\n\n\t\t\t\t\tconst point = isFlippedParallel ? -snapLine.perpDistance : snapLine.perpDistance\n\t\t\t\t\tconst distance = Math.abs(point - handlePoint)\n\t\t\t\t\tif (distance < snapDistance) {\n\t\t\t\t\t\tsnapPoint = point\n\t\t\t\t\t\tsnapDistance = distance\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (snapDistance > maxSnapDistance) {\n\t\t\tsnapPoint = handlePoint\n\t\t}\n\n\t\tconst newMid = clamp(invLerp(loPoint, hiPoint, snapPoint), 0, 1)\n\n\t\treturn {\n\t\t\tid: shape.id,\n\t\t\ttype: shape.type,\n\t\t\tprops: {\n\t\t\t\telbowMidPoint: newMid,\n\t\t\t},\n\t\t}\n\t}\n\n\tprivate onTerminalHandleDrag(\n\t\tshape: TLArrowShape,\n\t\t{ handle, isPrecise }: TLHandleDragInfo<TLArrowShape>,\n\t\thandleId: ArrowHandles.Start | ArrowHandles.End\n\t) {\n\t\tconst bindings = getArrowBindings(this.editor, shape)\n\n\t\tconst update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }\n\n\t\tconst currentBinding = bindings[handleId]\n\n\t\tconst oppositeHandleId = handleId === ArrowHandles.Start ? ArrowHandles.End : ArrowHandles.Start\n\t\tconst oppositeBinding = bindings[oppositeHandleId]\n\n\t\tconst targetInfo = updateArrowTargetState({\n\t\t\teditor: this.editor,\n\t\t\tpointInPageSpace: this.editor.getShapePageTransform(shape.id)!.applyToPoint(handle),\n\t\t\tarrow: shape,\n\t\t\tisPrecise: isPrecise,\n\t\t\tisExact: this.editor.inputs.altKey,\n\t\t\tcurrentBinding,\n\t\t\toppositeBinding,\n\t\t})\n\n\t\tif (!targetInfo) {\n\t\t\t// todo: maybe double check that this isn't equal to the other handle too?\n\t\t\tremoveArrowBinding(this.editor, shape, handleId)\n\t\t\tconst newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)\n\t\t\tupdate.props![handleId] = {\n\t\t\t\tx: newPoint.x,\n\t\t\t\ty: newPoint.y,\n\t\t\t}\n\t\t\treturn update\n\t\t}\n\n\t\t// we've got a target! the handle is being dragged over a shape, bind to it\n\t\tconst bindingProps: TLArrowBindingProps = {\n\t\t\tterminal: handleId,\n\t\t\tnormalizedAnchor: targetInfo.normalizedAnchor,\n\t\t\tisPrecise: targetInfo.isPrecise,\n\t\t\tisExact: this.editor.inputs.altKey,\n\t\t\tsnap: targetInfo.snap,\n\t\t}\n\n\t\tcreateOrUpdateArrowBinding(this.editor, shape, targetInfo.target.id, bindingProps)\n\n\t\tconst newBindings = getArrowBindings(this.editor, shape)\n\t\tif (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {\n\t\t\tif (\n\t\t\t\tVec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)\n\t\t\t) {\n\t\t\t\tcreateOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {\n\t\t\t\t\t...newBindings.end.props,\n\t\t\t\t\tnormalizedAnchor: {\n\t\t\t\t\t\tx: newBindings.end.props.normalizedAnchor.x + 0.05,\n\t\t\t\t\t\ty: newBindings.end.props.normalizedAnchor.y,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn update\n\t}\n\n\toverride onTranslateStart(shape: TLArrowShape) {\n\t\tconst bindings = getArrowBindings(this.editor, shape)\n\n\t\t// ...if the user is dragging ONLY this arrow, for elbow shapes, we can't maintain the bindings well just yet so we remove them entirely\n\t\tif (shape.props.kind === 'elbow' && this.editor.getOnlySelectedShapeId() === shape.id) {\n\t\t\tconst info = getArrowInfo(this.editor, shape)\n\t\t\tif (!info) return\n\t\t\tconst update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }\n\t\t\tif (bindings.start) {\n\t\t\t\tupdate.props!.start = { x: info.start.point.x, y: info.start.point.y }\n\t\t\t\tremoveArrowBinding(this.editor, shape, 'start')\n\t\t\t}\n\t\t\tif (bindings.end) {\n\t\t\t\tupdate.props!.end = { x: info.end.point.x, y: info.end.point.y }\n\t\t\t\tremoveArrowBinding(this.editor, shape, 'end')\n\t\t\t}\n\t\t\treturn update\n\t\t}\n\n\t\tconst terminalsInArrowSpace = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)\n\t\tconst shapePageTransform = this.editor.getShapePageTransform(shape.id)!\n\n\t\t// If at least one bound shape is in the selection, do nothing;\n\t\t// If no bound shapes are in the selection, unbind any bound shapes\n\n\t\tconst selectedShapeIds = this.editor.getSelectedShapeIds()\n\n\t\tif (\n\t\t\t(bindings.start &&\n\t\t\t\t(selectedShapeIds.includes(bindings.start.toId) ||\n\t\t\t\t\tthis.editor.isAncestorSelected(bindings.start.toId))) ||\n\t\t\t(bindings.end &&\n\t\t\t\t(selectedShapeIds.includes(bindings.end.toId) ||\n\t\t\t\t\tthis.editor.isAncestorSelected(bindings.end.toId)))\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\t// When we start translating shapes, record where their bindings were in page space so we\n\t\t// can maintain them as we translate the arrow\n\t\tshapeAtTranslationStart.set(shape, {\n\t\t\tpagePosition: shapePageTransform.applyToPoint(shape),\n\t\t\tterminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {\n\t\t\t\tconst binding = bindings[terminalName]\n\t\t\t\tif (!binding) return null\n\t\t\t\treturn {\n\t\t\t\t\tbinding,\n\t\t\t\t\tshapePosition: point,\n\t\t\t\t\tpagePosition: shapePageTransform.applyToPoint(point),\n\t\t\t\t}\n\t\t\t}),\n\t\t})\n\n\t\t// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating\n\t\tif (bindings.start) {\n\t\t\tupdateArrowTerminal({\n\t\t\t\teditor: this.editor,\n\t\t\t\tarrow: shape,\n\t\t\t\tterminal: 'start',\n\t\t\t\tuseHandle: true,\n\t\t\t})\n\t\t\tshape = this.editor.getShape(shape.id) as TLArrowShape\n\t\t}\n\t\tif (bindings.end) {\n\t\t\tupdateArrowTerminal({\n\t\t\t\teditor: this.editor,\n\t\t\t\tarrow: shape,\n\t\t\t\tterminal: 'end',\n\t\t\t\tuseHandle: true,\n\t\t\t})\n\t\t}\n\n\t\tfor (const handleName of [ArrowHandles.Start, ArrowHandles.End] as const) {\n\t\t\tconst binding = bindings[handleName]\n\t\t\tif (!binding) continue\n\n\t\t\tthis.editor.updateBinding({\n\t\t\t\t...binding,\n\t\t\t\tprops: { ...binding.props, isPrecise: true },\n\t\t\t})\n\t\t}\n\n\t\treturn\n\t}\n\n\toverride onTranslate(initialShape: TLArrowShape, shape: TLArrowShape) {\n\t\tconst atTranslationStart = shapeAtTranslationStart.get(initialShape)\n\t\tif (!atTranslationStart) return\n\n\t\tconst shapePageTransform = this.editor.getShapePageTransform(shape.id)!\n\t\tconst pageDelta = Vec.Sub(\n\t\t\tshapePageTransform.applyToPoint(shape),\n\t\t\tatTranslationStart.pagePosition\n\t\t)\n\n\t\tfor (const terminalBinding of Object.values(atTranslationStart.terminalBindings)) {\n\t\t\tif (!terminalBinding) continue\n\n\t\t\tconst newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5))\n\t\t\tconst newTarget = this.editor.getShapeAtPoint(newPagePoint, {\n\t\t\t\thitInside: true,\n\t\t\t\thitFrameInside: true,\n\t\t\t\tmargin: 0,\n\t\t\t\tfilter: (targetShape) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t!targetShape.isLocked &&\n\t\t\t\t\t\tthis.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: 'arrow' })\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tif (newTarget?.id === terminalBinding.binding.toId) {\n\t\t\t\tconst targetBounds = Box.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds)\n\t\t\t\tconst pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint)\n\t\t\t\tconst normalizedAnchor = {\n\t\t\t\t\tx: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,\n\t\t\t\t\ty: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,\n\t\t\t\t}\n\t\t\t\tcreateOrUpdateArrowBinding(this.editor, shape, newTarget.id, {\n\t\t\t\t\t...terminalBinding.binding.props,\n\t\t\t\t\tnormalizedAnchor,\n\t\t\t\t\tisPrecise: true,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tremoveArrowBinding(this.editor, shape, terminalBinding.binding.props.terminal)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly _resizeInitialBindings = new WeakCache<TLArrowShape, TLArrowBindings>()\n\n\toverride onResize(shape: TLArrowShape, info: TLResizeInfo<TLArrowShape>) {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst bindings = this._resizeInitialBindings.get(shape, () =>\n\t\t\tgetArrowBindings(this.editor, shape)\n\t\t)\n\t\tconst terminals = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)\n\n\t\tconst { start, end } = structuredClone<TLArrowShape['props']>(shape.props)\n\t\tlet { bend } = shape.props\n\n\t\t// Rescale start handle if it's not bound to a shape\n\t\tif (!bindings.start) {\n\t\t\tstart.x = terminals.start.x * scaleX\n\t\t\tstart.y = terminals.start.y * scaleY\n\t\t}\n\n\t\t// Rescale end handle if it's not bound to a shape\n\t\tif (!bindings.end) {\n\t\t\tend.x = terminals.end.x * scaleX\n\t\t\tend.y = terminals.end.y * scaleY\n\t\t}\n\n\t\t// todo: we should only change the normalized anchor positions\n\t\t// of the shape's handles if the bound shape is also being resized\n\n\t\tconst mx = Math.abs(scaleX)\n\t\tconst my = Math.abs(scaleY)\n\n\t\tconst startNormalizedAnchor = bindings?.start\n\t\t\t? Vec.From(bindings.start.props.normalizedAnchor)\n\t\t\t: null\n\t\tconst endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null\n\n\t\tif (scaleX < 0 && scaleY >= 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= -1\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (startNormalizedAnchor) {\n\t\t\t\tstartNormalizedAnchor.x = 1 - startNormalizedAnchor.x\n\t\t\t}\n\n\t\t\tif (endNormalizedAnchor) {\n\t\t\t\tendNormalizedAnchor.x = 1 - endNormalizedAnchor.x\n\t\t\t}\n\t\t} else if (scaleX >= 0 && scaleY < 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= -1\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (startNormalizedAnchor) {\n\t\t\t\tstartNormalizedAnchor.y = 1 - startNormalizedAnchor.y\n\t\t\t}\n\n\t\t\tif (endNormalizedAnchor) {\n\t\t\t\tendNormalizedAnchor.y = 1 - endNormalizedAnchor.y\n\t\t\t}\n\t\t} else if (scaleX >= 0 && scaleY >= 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\t\t} else if (scaleX < 0 && scaleY < 0) {\n\t\t\tif (bend !== 0) {\n\t\t\t\tbend *= Math.max(mx, my)\n\t\t\t}\n\n\t\t\tif (startNormalizedAnchor) {\n\t\t\t\tstartNormalizedAnchor.x = 1 - startNormalizedAnchor.x\n\t\t\t\tstartNormalizedAnchor.y = 1 - startNormalizedAnchor.y\n\t\t\t}\n\n\t\t\tif (endNormalizedAnchor) {\n\t\t\t\tendNormalizedAnchor.x = 1 - endNormalizedAnchor.x\n\t\t\t\tendNormalizedAnchor.y = 1 - endNormalizedAnchor.y\n\t\t\t}\n\t\t}\n\n\t\tif (bindings.start && startNormalizedAnchor) {\n\t\t\tcreateOrUpdateArrowBinding(this.editor, shape, bindings.start.toId, {\n\t\t\t\t...bindings.start.props,\n\t\t\t\tnormalizedAnchor: startNormalizedAnchor.toJson(),\n\t\t\t})\n\t\t}\n\t\tif (bindings.end && endNormalizedAnchor) {\n\t\t\tcreateOrUpdateArrowBinding(this.editor, shape, bindings.end.toId, {\n\t\t\t\t...bindings.end.props,\n\t\t\t\tnormalizedAnchor: endNormalizedAnchor.toJson(),\n\t\t\t})\n\t\t}\n\n\t\tconst next = {\n\t\t\tprops: {\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t\tbend,\n\t\t\t},\n\t\t}\n\n\t\treturn next\n\t}\n\n\toverride onDoubleClickHandle(\n\t\tshape: TLArrowShape,\n\t\thandle: TLHandle\n\t): TLShapePartial<TLArrowShape> | void {\n\t\tswitch (handle.id) {\n\t\t\tcase ArrowHandles.Start: {\n\t\t\t\treturn {\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\ttype: shape.type,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\tarrowheadStart: shape.props.arrowheadStart === 'none' ? 'arrow' : 'none',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase ArrowHandles.End: {\n\t\t\t\treturn {\n\t\t\t\t\tid: shape.id,\n\t\t\t\t\ttype: shape.type,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...shape.props,\n\t\t\t\t\t\tarrowheadEnd: shape.props.arrowheadEnd === 'none' ? 'arrow' : 'none',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponent(shape: TLArrowShape) {\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tconst theme = useDefaultColorTheme()\n\t\tconst onlySelectedShape = this.editor.getOnlySelectedShape()\n\t\tconst shouldDisplayHandles =\n\t\t\tthis.editor.isInAny(\n\t\t\t\t'select.idle',\n\t\t\t\t'select.pointing_handle',\n\t\t\t\t'select.dragging_handle',\n\t\t\t\t'select.translating',\n\t\t\t\t'arrow.dragging'\n\t\t\t) && !this.editor.getIsReadonly()\n\n\t\tconst info = getArrowInfo(this.editor, shape)\n\t\tif (!info?.isValid) return null\n\n\t\tconst labelPosition = getArrowLabelPosition(this.editor, shape)\n\t\tconst isSelected = shape.id === this.editor.getOnlySelectedShapeId()\n\t\tconst isEditing = this.editor.getEditingShapeId() === shape.id\n\t\tconst showArrowLabel = isEditing || shape.props.text\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>\n\t\t\t\t\t<ArrowSvg\n\t\t\t\t\t\tshape={shape}\n\t\t\t\t\t\tshouldDisplayHandles={shouldDisplayHandles && onlySelectedShape?.id === shape.id}\n\t\t\t\t\t/>\n\t\t\t\t\t{shape.props.kind === 'elbow' && debugFlags.debugElbowArrows.get() && (\n\t\t\t\t\t\t<ElbowArrowDebug arrow={shape} />\n\t\t\t\t\t)}\n\t\t\t\t</SVGContainer>\n\t\t\t\t{showArrowLabel && (\n\t\t\t\t\t<PlainTextLabel\n\t\t\t\t\t\tshapeId={shape.id}\n\t\t\t\t\t\tclassNamePrefix=\"tl-arrow\"\n\t\t\t\t\t\ttype=\"arrow\"\n\t\t\t\t\t\tfont={shape.props.font}\n\t\t\t\t\t\tfontSize={getArrowLabelFontSize(shape)}\n\t\t\t\t\t\tlineHeight={TEXT_PROPS.lineHeight}\n\t\t\t\t\t\talign=\"middle\"\n\t\t\t\t\t\tverticalAlign=\"middle\"\n\t\t\t\t\t\ttext={shape.props.text}\n\t\t\t\t\t\tlabelColor={theme[shape.props.labelColor].solid}\n\t\t\t\t\t\ttextWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}\n\t\t\t\t\t\tisSelected={isSelected}\n\t\t\t\t\t\tpadding={0}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttransform: `translate(${labelPosition.box.center.x}px, ${labelPosition.box.center.y}px)`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t}\n\n\tindicator(shape: TLArrowShape) {\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tconst isEditing = useIsEditing(shape.id)\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\tconst clipPathId = useSharedSafeId(shape.id + '_clip')\n\n\t\tconst info = getArrowInfo(this.editor, shape)\n\t\tif (!info) return null\n\n\t\tconst { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, info?.bindings)\n\t\tconst geometry = this.editor.getShapeGeometry<Group2d>(shape)\n\t\tconst bounds = geometry.bounds\n\n\t\tconst labelGeometry =\n\t\t\tisEditing || shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null\n\n\t\tif (Vec.Equals(start, end)) return null\n\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale\n\n\t\tconst as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)\n\t\tconst ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)\n\n\t\tconst includeClipPath =\n\t\t\t(as && info.start.arrowhead !== 'arrow') ||\n\t\t\t(ae && info.end.arrowhead !== 'arrow') ||\n\t\t\t!!labelGeometry\n\n\t\tif (isEditing && labelGeometry) {\n\t\t\treturn (\n\t\t\t\t<rect\n\t\t\t\t\tx={toDomPrecision(labelGeometry.x)}\n\t\t\t\t\ty={toDomPrecision(labelGeometry.y)}\n\t\t\t\t\twidth={labelGeometry.w}\n\t\t\t\t\theight={labelGeometry.h}\n\t\t\t\t\trx={3.5 * shape.props.scale}\n\t\t\t\t\try={3.5 * shape.props.scale}\n\t\t\t\t/>\n\t\t\t)\n\t\t}\n\t\tconst clipStartArrowhead = !(\n\t\t\tinfo.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'\n\t\t)\n\t\tconst clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')\n\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t{includeClipPath && (\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<ArrowClipPath\n\t\t\t\t\t\t\tradius={3.5 * shape.props.scale}\n\t\t\t\t\t\t\thasText={shape.props.text.trim().length > 0}\n\t\t\t\t\t\t\tbounds={bounds}\n\t\t\t\t\t\t\tlabelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}\n\t\t\t\t\t\t\tas={clipStartArrowhead && as ? as : ''}\n\t\t\t\t\t\t\tae={clipEndArrowhead && ae ? ae : ''}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</defs>\n\t\t\t\t)}\n\t\t\t\t<g\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tclipPath: includeClipPath ? `url(#${clipPathId})` : undefined,\n\t\t\t\t\t\tWebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}\n\t\t\t\t\t{includeClipPath && (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tx={bounds.minX - 100}\n\t\t\t\t\t\t\ty={bounds.minY - 100}\n\t\t\t\t\t\t\twidth={bounds.width + 200}\n\t\t\t\t\t\t\theight={bounds.height + 200}\n\t\t\t\t\t\t\topacity={0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{getArrowBodyPath(\n\t\t\t\t\t\tshape,\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\tshape.props.dash === 'draw'\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tstyle: 'draw',\n\t\t\t\t\t\t\t\t\trandomSeed: shape.id,\n\t\t\t\t\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t\t\t\t\tpasses: 1,\n\t\t\t\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\t\t\t\troundness: strokeWidth * 2,\n\t\t\t\t\t\t\t\t\tprops: { strokeWidth: undefined },\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: { style: 'solid', strokeWidth: 1, props: { strokeWidth: undefined } }\n\t\t\t\t\t)}\n\t\t\t\t</g>\n\t\t\t\t{as && <path d={as} />}\n\t\t\t\t{ae && <path d={ae} />}\n\t\t\t\t{labelGeometry && (\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={toDomPrecision(labelGeometry.x)}\n\t\t\t\t\t\ty={toDomPrecision(labelGeometry.y)}\n\t\t\t\t\t\twidth={labelGeometry.w}\n\t\t\t\t\t\theight={labelGeometry.h}\n\t\t\t\t\t\trx={3.5}\n\t\t\t\t\t\try={3.5}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</g>\n\t\t)\n\t}\n\n\toverride onEditStart(shape: TLArrowShape) {\n\t\tif (shape.props.text.trim() === '') {\n\t\t\t// editing text for the first time, so set the position to the default:\n\t\t\tconst labelPosition = getArrowLabelDefaultPosition(this.editor, shape)\n\t\t\tthis.editor.updateShape<TLArrowShape>({\n\t\t\t\tid: shape.id,\n\t\t\t\ttype: shape.type,\n\t\t\t\tprops: { labelPosition },\n\t\t\t})\n\t\t}\n\t}\n\n\toverride onEditEnd(shape: TLArrowShape) {\n\t\tconst {\n\t\t\tid,\n\t\t\ttype,\n\t\t\tprops: { text },\n\t\t} = shape\n\n\t\tif (text.trimEnd() !== shape.props.text) {\n\t\t\tthis.editor.updateShapes<TLArrowShape>([\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\ttype,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext: text.trimEnd(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\t}\n\n\toverride toSvg(shape: TLArrowShape, ctx: SvgExportContext) {\n\t\tctx.addExportDef(getFillDefForExport(shape.props.fill))\n\t\tconst theme = getDefaultColorTheme(ctx)\n\t\tconst scaleFactor = 1 / shape.props.scale\n\n\t\treturn (\n\t\t\t<g transform={`scale(${scaleFactor})`}>\n\t\t\t\t<ArrowSvg shape={shape} shouldDisplayHandles={false} />\n\t\t\t\t<SvgTextLabel\n\t\t\t\t\tfontSize={getArrowLabelFontSize(shape)}\n\t\t\t\t\tfont={shape.props.font}\n\t\t\t\t\talign=\"middle\"\n\t\t\t\t\tverticalAlign=\"middle\"\n\t\t\t\t\ttext={shape.props.text}\n\t\t\t\t\tlabelColor={theme[shape.props.labelColor].solid}\n\t\t\t\t\tbounds={getArrowLabelPosition(this.editor, shape)\n\t\t\t\t\t\t.box.clone()\n\t\t\t\t\t\t.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}\n\t\t\t\t\tpadding={0}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t)\n\t}\n\n\toverride getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {\n\t\treturn [\n\t\t\tgetFillDefForCanvas(),\n\t\t\t{\n\t\t\t\tkey: `arrow:dot`,\n\t\t\t\tcomponent: ArrowheadDotDef,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: `arrow:cross`,\n\t\t\t\tcomponent: ArrowheadCrossDef,\n\t\t\t},\n\t\t]\n\t}\n\toverride getInterpolatedProps(\n\t\tstartShape: TLArrowShape,\n\t\tendShape: TLArrowShape,\n\t\tprogress: number\n\t): TLArrowShapeProps {\n\t\treturn {\n\t\t\t...(progress > 0.5 ? endShape.props : startShape.props),\n\t\t\tscale: lerp(startShape.props.scale, endShape.props.scale, progress),\n\t\t\tstart: {\n\t\t\t\tx: lerp(startShape.props.start.x, endShape.props.start.x, progress),\n\t\t\t\ty: lerp(startShape.props.start.y, endShape.props.start.y, progress),\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: lerp(startShape.props.end.x, endShape.props.end.x, progress),\n\t\t\t\ty: lerp(startShape.props.end.y, endShape.props.end.y, progress),\n\t\t\t},\n\t\t\tbend: lerp(startShape.props.bend, endShape.props.bend, progress),\n\t\t\tlabelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),\n\t\t}\n\t}\n}\n\nexport function getArrowLength(editor: Editor, shape: TLArrowShape): number {\n\tconst info = getArrowInfo(editor, shape)!\n\n\treturn info.type === 'straight'\n\t\t? Vec.Dist(info.start.handle, info.end.handle)\n\t\t: info.type === 'arc'\n\t\t\t? Math.abs(info.handleArc.length)\n\t\t\t: info.route.distance\n}\n\nconst ArrowSvg = track(function ArrowSvg({\n\tshape,\n\tshouldDisplayHandles,\n}: {\n\tshape: TLArrowShape\n\tshouldDisplayHandles: boolean\n}) {\n\tconst editor = useEditor()\n\tconst theme = useDefaultColorTheme()\n\tconst info = getArrowInfo(editor, shape)\n\tconst isForceSolid = useValue(\n\t\t'force solid',\n\t\t() => {\n\t\t\treturn editor.getZoomLevel() < 0.2\n\t\t},\n\t\t[editor]\n\t)\n\tconst clipPathId = useSharedSafeId(shape.id + '_clip')\n\tconst arrowheadDotId = useSharedSafeId('arrowhead-dot')\n\tconst arrowheadCrossId = useSharedSafeId('arrowhead-cross')\n\tconst isEditing = useIsEditing(shape.id)\n\tconst geometry = editor.getShapeGeometry(shape)\n\tif (!geometry) return null\n\tconst bounds = Box.ZeroFix(geometry.bounds)\n\tconst bindings = getArrowBindings(editor, shape)\n\n\tif (!info?.isValid) return null\n\n\tconst strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale\n\n\tconst as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)\n\tconst ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)\n\n\tlet handlePath: null | React.JSX.Element = null\n\n\tif (shouldDisplayHandles && (bindings.start || bindings.end)) {\n\t\thandlePath = getArrowHandlePath(info, {\n\t\t\tstyle: 'dashed',\n\t\t\tstart: 'skip',\n\t\t\tend: 'skip',\n\t\t\tlengthRatio: 2.5,\n\t\t\tstrokeWidth: 2 / editor.getZoomLevel(),\n\t\t\tprops: {\n\t\t\t\tclassName: 'tl-arrow-hint',\n\t\t\t\tmarkerStart: bindings.start\n\t\t\t\t\t? bindings.start.props.isExact\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: bindings.start.props.isPrecise\n\t\t\t\t\t\t\t? `url(#${arrowheadCrossId})`\n\t\t\t\t\t\t\t: `url(#${arrowheadDotId})`\n\t\t\t\t\t: '',\n\t\t\t\tmarkerEnd: bindings.end\n\t\t\t\t\t? bindings.end.props.isExact\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: bindings.end.props.isPrecise\n\t\t\t\t\t\t\t? `url(#${arrowheadCrossId})`\n\t\t\t\t\t\t\t: `url(#${arrowheadDotId})`\n\t\t\t\t\t: '',\n\t\t\t\topacity: 0.16,\n\t\t\t},\n\t\t})\n\t}\n\n\tconst labelPosition = getArrowLabelPosition(editor, shape)\n\n\tconst clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')\n\tconst clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')\n\n\treturn (\n\t\t<>\n\t\t\t{/* Yep */}\n\t\t\t<defs>\n\t\t\t\t<clipPath id={clipPathId}>\n\t\t\t\t\t<ArrowClipPath\n\t\t\t\t\t\tradius={3.5 * shape.props.scale}\n\t\t\t\t\t\thasText={isEditing || shape.props.text.trim().length > 0}\n\t\t\t\t\t\tbounds={bounds}\n\t\t\t\t\t\tlabelBounds={labelPosition.box}\n\t\t\t\t\t\tas={clipStartArrowhead && as ? as : ''}\n\t\t\t\t\t\tae={clipEndArrowhead && ae ? ae : ''}\n\t\t\t\t\t/>\n\t\t\t\t</clipPath>\n\t\t\t</defs>\n\t\t\t<g\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke={theme[shape.props.color].solid}\n\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\tpointerEvents=\"none\"\n\t\t\t>\n\t\t\t\t{handlePath}\n\t\t\t\t<g\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tclipPath: `url(#${clipPathId})`,\n\t\t\t\t\t\tWebkitClipPath: `url(#${clipPathId})`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<rect\n\t\t\t\t\t\tx={toDomPrecision(bounds.minX - 100)}\n\t\t\t\t\t\ty={toDomPrecision(bounds.minY - 100)}\n\t\t\t\t\t\twidth={toDomPrecision(bounds.width + 200)}\n\t\t\t\t\t\theight={toDomPrecision(bounds.height + 200)}\n\t\t\t\t\t\topacity={0}\n\t\t\t\t\t/>\n\t\t\t\t\t{getArrowBodyPath(shape, info, {\n\t\t\t\t\t\tstyle: shape.props.dash,\n\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\tforceSolid: isForceSolid,\n\t\t\t\t\t\trandomSeed: shape.id,\n\t\t\t\t\t})}\n\t\t\t\t</g>\n\t\t\t\t{as && clipStartArrowhead && shape.props.fill !== 'none' && (\n\t\t\t\t\t<ShapeFill\n\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\td={as}\n\t\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\t\tfill={shape.props.fill}\n\t\t\t\t\t\tscale={shape.props.scale}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{ae && clipEndArrowhead && shape.props.fill !== 'none' && (\n\t\t\t\t\t<ShapeFill\n\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\td={ae}\n\t\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\t\tfill={shape.props.fill}\n\t\t\t\t\t\tscale={shape.props.scale}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{as && <path d={as} />}\n\t\t\t\t{ae && <path d={ae} />}\n\t\t\t</g>\n\t\t</>\n\t)\n})\n\nfunction ArrowClipPath({\n\tradius,\n\thasText,\n\tbounds,\n\tlabelBounds,\n\tas,\n\tae,\n}: {\n\tradius: number\n\thasText: boolean\n\tbounds: Box\n\tlabelBounds: Box\n\tas: string\n\tae: string\n}) {\n\tconst path = useMemo(() => {\n\t\t// The direction in which we create the different path parts is important, as it determines what gets clipped.\n\t\t// See the description on the directions in the non-zero fill rule example:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule#nonzero\n\t\tconst path = new PathBuilder()\n\n\t\t// We create this one in the clockwise direction\n\t\tpath\n\t\t\t.moveTo(bounds.left - 100, bounds.top - 100)\n\t\t\t.lineTo(bounds.right + 100, bounds.top - 100)\n\t\t\t.lineTo(bounds.right + 100, bounds.bottom + 100)\n\t\t\t.lineTo(bounds.left - 100, bounds.bottom + 100)\n\t\t\t.close()\n\n\t\tif (hasText) {\n\t\t\t// We create this one in the counter-clockwise direction, which cuts out the label box\n\t\t\tpath\n\t\t\t\t.moveTo(labelBounds.left, labelBounds.top + radius)\n\t\t\t\t.lineTo(labelBounds.left, labelBounds.bottom - radius)\n\t\t\t\t.arcTo(radius, false, false, labelBounds.left + radius, labelBounds.bottom)\n\t\t\t\t.lineTo(labelBounds.right - radius, labelBounds.bottom)\n\t\t\t\t.arcTo(radius, false, false, labelBounds.right, labelBounds.bottom - radius)\n\t\t\t\t.lineTo(labelBounds.right, labelBounds.top + radius)\n\t\t\t\t.arcTo(radius, false, false, labelBounds.right - radius, labelBounds.top)\n\t\t\t\t.lineTo(labelBounds.left + radius, labelBounds.top)\n\t\t\t\t.arcTo(radius, false, false, labelBounds.left, labelBounds.top + radius)\n\t\t\t\t.close()\n\t\t}\n\n\t\treturn path.toD()\n\t}, [\n\t\tradius,\n\t\thasText,\n\t\tbounds.bottom,\n\t\tbounds.left,\n\t\tbounds.right,\n\t\tbounds.top,\n\t\tlabelBounds.bottom,\n\t\tlabelBounds.left,\n\t\tlabelBounds.right,\n\t\tlabelBounds.top,\n\t])\n\n\t// We also append the arrowhead paths to the clip path, so that we also clip the arrowheads\n\treturn <path d={`${path}${as}${ae}`} />\n}\n\nconst shapeAtTranslationStart = new WeakMap<\n\tTLArrowShape,\n\t{\n\t\tpagePosition: Vec\n\t\tterminalBindings: Record<\n\t\t\t'start' | 'end',\n\t\t\t{\n\t\t\t\tpagePosition: Vec\n\t\t\t\tshapePosition: Vec\n\t\t\t\tbinding: TLArrowBinding\n\t\t\t} | null\n\t\t>\n\t}\n>()\n\nfunction ArrowheadDotDef() {\n\tconst id = useSharedSafeId('arrowhead-dot')\n\treturn (\n\t\t<marker id={id} className=\"tl-arrow-hint\" refX=\"3.0\" refY=\"3.0\" orient=\"0\">\n\t\t\t<circle cx=\"3\" cy=\"3\" r=\"2\" strokeDasharray=\"100%\" />\n\t\t</marker>\n\t)\n}\n\nfunction ArrowheadCrossDef() {\n\tconst id = useSharedSafeId('arrowhead-cross')\n\treturn (\n\t\t<marker id={id} className=\"tl-arrow-hint\" refX=\"3.0\" refY=\"3.0\" orient=\"auto\">\n\t\t\t<line x1=\"1.5\" y1=\"1.5\" x2=\"4.5\" y2=\"4.5\" strokeDasharray=\"100%\" />\n\t\t\t<line x1=\"1.5\" y1=\"4.5\" x2=\"4.5\" y2=\"1.5\" strokeDasharray=\"100%\" />\n\t\t</marker>\n\t)\n}\n\n/**\n * Take 2 angles and return true if they are approximately parallel. Angle that point in the same\n * (or opposite) directions are considered parallel. This also handles wrap around - e.g. 0, \u03C0, and\n * 2\u03C0 are all considered parallel.\n */\nfunction anglesAreApproximatelyParallel(a: number, b: number, tolerance = 0.0001) {\n\tconst diff = Math.abs(a - b)\n\n\tconst isParallel = diff < tolerance\n\tconst isFlippedParallel = Math.abs(diff - Math.PI) < tolerance\n\tconst is360Parallel = Math.abs(diff - PI2) < tolerance\n\n\treturn { isParallel: isParallel || is360Parallel, isFlippedParallel }\n}\n"],
  "mappings": "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",
  "names": ["ArrowHandles", "ArrowSvg", "path"]
}
