import { Editor } from 'tldraw';
import { Signal } from 'tldraw';
import { TLAssetStore } from 'tldraw';
import { TLPresenceStateInfo } from 'tldraw';
import { TLPresenceUserInfo } from 'tldraw';
import { TLStore } from 'tldraw';
import { TLStoreSchemaOptions } from 'tldraw';
import { TLStoreWithStatus } from 'tldraw';

/** @public */
export declare type RemoteTLStoreWithStatus = Exclude<TLStoreWithStatus, {
    status: 'not-synced';
} | {
    status: 'synced-local';
}>;

/**
 * useSync creates a store that is synced with a multiplayer server.
 *
 * The store can be passed directly into the `<Tldraw />` component to enable multiplayer features.
 * It will handle loading states, and enable multiplayer UX like user cursors and following.
 *
 * To enable external blob storage, you should also pass in an `assets` object that implements the {@link tldraw#TLAssetStore} interface.
 * If you don't do this, adding large images and videos to rooms will cause performance issues at serialization boundaries.
 *
 * @example
 * ```tsx
 * function MyApp() {
 *     const store = useSync({
 *         uri: 'wss://myapp.com/sync/my-test-room',
 *         assets: myAssetStore
 *     })
 *     return <Tldraw store={store} />
 * }
 *
 * ```
 * @param opts - Options for the multiplayer sync store. See {@link UseSyncOptions} and {@link tldraw#TLStoreSchemaOptions}.
 *
 * @public
 */
export declare function useSync(opts: UseSyncOptions & TLStoreSchemaOptions): RemoteTLStoreWithStatus;

/**
 * Creates a tldraw store synced with a multiplayer room hosted on tldraw's demo server `https://demo.tldraw.xyz`.
 *
 * The store can be passed directly into the `<Tldraw />` component to enable multiplayer features.
 * It will handle loading states, and enable multiplayer UX like user cursors and following.
 *
 * All data on the demo server is
 *
 * - Deleted after a day or so.
 * - Publicly accessible to anyone who knows the room ID. Use your company name as a prefix to help avoid collisions, or generate UUIDs for maximum privacy.
 *
 * @example
 * ```tsx
 * function MyApp() {
 *     const store = useSyncDemo({roomId: 'my-app-test-room'})
 *     return <Tldraw store={store} />
 * }
 * ```
 *
 * @param options - Options for the multiplayer demo sync store. See {@link UseSyncDemoOptions} and {@link tldraw#TLStoreSchemaOptions}.
 *
 * @public
 */
export declare function useSyncDemo(options: UseSyncDemoOptions & TLStoreSchemaOptions): RemoteTLStoreWithStatus;

/** @public */
export declare interface UseSyncDemoOptions {
    /**
     * The room ID to sync with. Make sure the room ID is unique. The namespace is shared by
     * everyone using the demo server. Consider prefixing it with your company or project name.
     */
    roomId: string;
    /**
     * A signal that contains the user information needed for multiplayer features.
     * This should be synchronized with the `userPreferences` configuration for the main `<Tldraw />` component.
     * If not provided, a default implementation based on localStorage will be used.
     */
    userInfo?: Signal<TLPresenceUserInfo> | TLPresenceUserInfo;
    /* Excluded from this release type: host */
    /**
     * {@inheritdoc UseSyncOptions.getUserPresence}
     * @public
     */
    getUserPresence?(store: TLStore, user: TLPresenceUserInfo): null | TLPresenceStateInfo;
}

/**
 * Options for the {@link useSync} hook.
 * @public
 */
export declare interface UseSyncOptions {
    /**
     * The URI of the multiplayer server. This must include the protocol,
     *
     *   e.g. `wss://server.example.com/my-room` or `ws://localhost:5858/my-room`.
     *
     * Note that the protocol can also be `https` or `http` and it will upgrade to a websocket
     * connection.
     *
     * Optionally, you can pass a function which will be called each time a connection is
     * established to get the URI. This is useful if you need to include e.g. a short-lived session
     * token for authentication.
     */
    uri: (() => Promise<string> | string) | string;
    /**
     * A signal that contains the user information needed for multiplayer features.
     * This should be synchronized with the `userPreferences` configuration for the main `<Tldraw />` component.
     * If not provided, a default implementation based on localStorage will be used.
     */
    userInfo?: Signal<TLPresenceUserInfo> | TLPresenceUserInfo;
    /**
     * The asset store for blob storage. See {@link tldraw#TLAssetStore}.
     *
     * If you don't have time to implement blob storage and just want to get started, you can use the inline base64 asset store. {@link tldraw#inlineBase64AssetStore}
     * Note that storing base64 blobs inline in JSON is very inefficient and will cause performance issues quickly with large images and videos.
     */
    assets: TLAssetStore;
    /* Excluded from this release type: onMount */
    /* Excluded from this release type: roomId */
    /* Excluded from this release type: trackAnalyticsEvent */
    /**
     * A reactive function that returns a {@link @tldraw/tlschema#TLInstancePresence} object. The
     * result of this function will be synchronized across all clients to display presence
     * indicators such as cursors. See {@link @tldraw/tlschema#getDefaultUserPresence} for
     * the default implementation of this function.
     */
    getUserPresence?(store: TLStore, user: TLPresenceUserInfo): null | TLPresenceStateInfo;
}


export * from "@tldraw/sync-core";

export { }
